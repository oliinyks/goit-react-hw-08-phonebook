{"version":3,"file":"static/js/512.06c883f0.chunk.js","mappings":"6KACA,MAAyB,uB,SCCV,SAASA,EAAT,GAA8B,IAAZC,EAAW,EAAXA,SAChC,OAAO,mBAAQC,UAAWC,EAAnB,SAAgCF,GACtC,C,mECHF,MAAwB,yBAAxB,EAAyD,yB,6BCG1C,SAASG,IACtB,IAAMC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAMxB,OACE,kBAAME,SALa,SAAAC,GACnBA,EAAEC,gBACH,EAG+BC,aAAa,MAA3C,WAEE,kBAAOT,UAAWC,EAAWS,QAASP,EAAtC,oBAGA,kBACEH,UAAWC,EACXU,KAAK,QAGLC,KAAK,OACLC,GAAIV,EACJW,UAAQ,KAGV,kBAAOd,UAAWC,EAAWS,QAASL,EAAtC,uBAGA,kBACEL,UAAWC,EACXU,KAAK,WAGLC,KAAK,OACLC,GAAIR,EACJS,UAAQ,KAEd,SAAChB,EAAA,EAAD,CAAQa,KAAK,SAAb,sBAGD,CC1CD,MAAwB,qBCET,SAASI,IACvB,OACC,gCACC,eAAIf,UAAWC,EAAf,oBACA,SAACC,EAAD,MAGF,C,wDCTM,IAkBIE,EAAS,eAACY,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACP,EAAIQ,GAWvD,OARER,IAFFQ,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/CommonComponents/Button/Button.module.css?02ca","components/CommonComponents/Button/Button.jsx","webpack://goit-react-hw-08-phonebook/./src/components/LoginComponents/LoginForm/LoginForm.module.css?7f8c","components/LoginComponents/LoginForm/LoginForm.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/Login/Login.module.css?b420","pages/Login/Login.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__DKOwf\"};","import css from './Button.module.css';\n\nexport default function Button ({children}) {\n\treturn <button className={css.button}>{children}</button>;\n };","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"LoginForm_label__GiGZi\",\"input\":\"LoginForm_input__poY3H\"};","import css from './LoginForm.module.css';\nimport { nanoid } from 'nanoid';\nimport Button from 'components/CommonComponents/Button'\n\nexport default function LoginForm() {\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n\n      <label className={css.label} htmlFor={emailInputId}>\n        Email\n      </label>\n      <input\n        className={css.input}\n        type=\"email\"\n        //   value={name}\n        //   onChange={handleInputChange}\n        name=\"name\"\n        id={emailInputId}\n        required\n      />\n\n      <label className={css.label} htmlFor={passwordInputId}>\n        Password\n      </label>\n      <input\n        className={css.input}\n        type=\"password\"\n        //   value={name}\n        //   onChange={handleInputChange}\n        name=\"name\"\n        id={passwordInputId}\n        required\n      />\n\t\t<Button type=\"submit\">Log In</Button>\n    </form>\n  );\n}","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Login_title__SJ0Uv\"};","import LoginForm from 'components/LoginComponents/LoginForm';\nimport css from './Login.module.css';\n\nexport default function Login() {\n\treturn (\n\t\t<section>\n\t\t\t<h2 className={css.title}>Login</h2>\n\t\t\t<LoginForm/>\n\t\t</section>\n\t)\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Button","children","className","css","LoginForm","emailInputId","nanoid","passwordInputId","onSubmit","e","preventDefault","autoComplete","htmlFor","type","name","id","required","Login","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}