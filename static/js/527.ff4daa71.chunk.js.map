{"version":3,"file":"static/js/527.ff4daa71.chunk.js","mappings":"6KACA,MAAyB,uB,SCCV,SAASA,EAAT,GAA8B,IAAZC,EAAW,EAAXA,SAChC,OAAO,mBAAQC,UAAWC,EAAnB,SAAgCF,GACtC,C,oECHF,MAAwB,4BAAxB,EAA4D,4B,6BCG7C,SAASG,IACtB,IAAMC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAMxB,OACE,kBAAMG,SALa,SAAAC,GACnBA,EAAEC,gBACH,EAG+BC,aAAa,MAA3C,WACE,kBAAOV,UAAWC,EAAWU,QAASR,EAAtC,uBAGA,kBACEH,UAAWC,EACXW,KAAK,OAGLC,KAAK,OACLC,GAAIX,EACJY,UAAQ,KAGV,kBAAOf,UAAWC,EAAWU,QAASN,EAAtC,oBAGA,kBACEL,UAAWC,EACXW,KAAK,QAGLC,KAAK,OACLC,GAAIT,EACJU,UAAQ,KAGV,kBAAOf,UAAWC,EAAWU,QAASL,EAAtC,uBAGA,kBACEN,UAAWC,EACXW,KAAK,WAGLC,KAAK,OACLC,GAAIR,EACJS,UAAQ,KAEd,SAACjB,EAAA,EAAD,CAAQc,KAAK,SAAb,wBAGD,CCvDD,MAAwB,wBCET,SAASI,IACvB,OACC,gCACC,eAAIhB,UAAWC,EAAf,2BACA,SAACC,EAAD,MAGF,C,wDCTM,IAkBIE,EAAS,eAACa,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACP,EAAIQ,GAWvD,OARER,IAFFQ,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/CommonComponents/Button/Button.module.css?02ca","components/CommonComponents/Button/Button.jsx","webpack://goit-react-hw-08-phonebook/./src/components/RegisterComponents/RegisterForm/RegisterForm.module.css?5a77","components/RegisterComponents/RegisterForm/RegisterForm.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/Register/Register.module.css?12fc","pages/Register/Register.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__DKOwf\"};","import css from './Button.module.css';\n\nexport default function Button ({children}) {\n\treturn <button className={css.button}>{children}</button>;\n };","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"RegisterForm_label__CSj8N\",\"input\":\"RegisterForm_input__C8Zdv\"};","import css from './RegisterForm.module.css';\nimport { nanoid } from 'nanoid';\nimport Button from 'components/CommonComponents/Button'\n\nexport default function RegisterForm() {\n  const nameInputId = nanoid();\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n      <label className={css.label} htmlFor={nameInputId}>\n        Username\n      </label>\n      <input\n        className={css.input}\n        type=\"text\"\n        //   value={name}\n        //   onChange={handleInputChange}\n        name=\"name\"\n        id={nameInputId}\n        required\n      />\n\n      <label className={css.label} htmlFor={emailInputId}>\n        Email\n      </label>\n      <input\n        className={css.input}\n        type=\"email\"\n        //   value={name}\n        //   onChange={handleInputChange}\n        name=\"name\"\n        id={emailInputId}\n        required\n      />\n\n      <label className={css.label} htmlFor={passwordInputId}>\n        Password\n      </label>\n      <input\n        className={css.input}\n        type=\"password\"\n        //   value={name}\n        //   onChange={handleInputChange}\n        name=\"name\"\n        id={passwordInputId}\n        required\n      />\n\t\t<Button type=\"submit\">Register</Button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Register_title__4r11G\"};","import RegisterForm from 'components/RegisterComponents/RegisterForm'\nimport css from './Register.module.css'\n\nexport default function Register() {\n\treturn (\n\t\t<section>\n\t\t\t<h2 className={css.title}>Registration</h2>\n\t\t\t<RegisterForm/>\n\t\t</section>\n\t)\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Button","children","className","css","RegisterForm","nameInputId","nanoid","emailInputId","passwordInputId","onSubmit","e","preventDefault","autoComplete","htmlFor","type","name","id","required","Register","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}