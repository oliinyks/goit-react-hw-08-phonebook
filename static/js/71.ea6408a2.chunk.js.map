{"version":3,"file":"static/js/71.ea6408a2.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/CommonComponents/Button/Button.module.css?02ca","components/CommonComponents/Button/Button.jsx","redux/contacts/selectors.js","hooks/useContacts.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactsComponents/Form/Form.module.css?33b7","components/ContactsComponents/Form/Form.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsComponents/OneContact/OneContact.module.css?8060","components/ContactsComponents/OneContact/OneContact.jsx","redux/filter/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactsComponents/ContactList/ContactList.module.css?6b86","components/ContactsComponents/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsComponents/Filter/Filter.module.css?febc","components/ContactsComponents/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/Contacts/Contacts.module.css?fb9d","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__DKOwf\"};","import css from './Button.module.css';\n\nexport default function Button ({children}) {\n\treturn <button className={css.button}>{children}</button>;\n };","export const selectLoading = state => state.contacts.loading;\nexport const selectAllContacts = state => state.contacts.items;","import { useSelector } from 'react-redux';\nimport { selectLoading, selectAllContacts } from 'redux/contacts/selectors';\n\nexport const useContacts = () => {\n  const isLoading = useSelector(selectLoading);\n  const contacts = useSelector(selectAllContacts);\n  return {\n    isLoading,\n    contacts,\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"Form_box__JOGSh\",\"label\":\"Form_label__Hu0fD\",\"input\":\"Form_input__3M8A7\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport {useContacts} from 'hooks/useContacts'\nimport Button from 'components/CommonComponents/Button';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport { useSelector } from 'react-redux';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport css from './Form.module.css';\n\nexport default function Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const {isLoading} = useContacts;\n  const contacts = useSelector(selectAllContacts);\n  const dispatch = useDispatch();\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const contactsName = contacts.map(contact => contact.name);\n    const filterName = contactsName.some(\n      contactName => contactName.toLowerCase() === name.toLowerCase()\n    );\n    if (filterName) {\n      return toast.error('You already have a contact with that name');\n    }\n\n    const newContact = {\n      name,\n      number,\n    };\n\n    dispatch(addContact(newContact));\n    toast.success('You have just created a new contact');\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={css.box}>\n      <form onSubmit={handleSubmit} className={css.box}>\n        <label className={css.label} htmlFor={nameInputId}>\n          Name\n        </label>\n        <input\n          className={css.input}\n          type=\"text\"\n          value={name}\n          onChange={handleInputChange}\n          name=\"name\"\n          id={nameInputId}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n\n        <label className={css.label} htmlFor={numberInputId}>\n          Number\n        </label>\n        <input\n          className={css.input}\n          type=\"tel\"\n          value={number}\n          onChange={handleInputChange}\n          name=\"number\"\n          id={numberInputId}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n\n        <Button type=\"submit\" disabled={isLoading}>\n          {isLoading ? 'Adding contact...' : 'Add contact'}\n        </Button>\n      </form>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"OneContact_item__Y0Xsd\",\"button\":\"OneContact_button__i5HbT\"};","import React from 'react';\nimport { toast } from 'react-toastify';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport {deleteContact} from 'redux/contacts/operations';\nimport css from './OneContact.module.css';\nimport { GiSandsOfTime } from 'react-icons/gi';\nimport { BsXCircle } from 'react-icons/bs';\n\nexport default function OneContact({ id, name, number }) {\n   const isLoading = useSelector(selectLoading);\n  const dispatch = useDispatch();\n\n  const deleteContacts = contactId => {\n\t dispatch(deleteContact(contactId));\n    toast.success('You have just deleted a contact');\n  };\n\n  return (\n    <li className={css.item} key={id}>\n      <p>\n        {name}: {number}\n      </p>\n      <button\n        type=\"button\"\n\t\t  className={css.button}\n        onClick={() => deleteContacts(id)}\n      >\n        {isLoading ? <GiSandsOfTime/> :  <BsXCircle/>}\n      </button>\n    </li>\n  );\n}\n","export const getStatusFilter = state => state.filter;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"items\":\"ContactList_items__dBi8j\"};","import React from 'react';\nimport OneContact from '../OneContact';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { getStatusFilter } from 'redux/filter/selectors';\nimport { useSelector } from 'react-redux';\nimport css from './ContactList.module.css';\n\nexport default function ContactList() {\n  const filter = useSelector(getStatusFilter);\n  const contacts = useSelector(selectAllContacts);\n\n  const contactsList = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(normalizedFilter);\n    });\n  };\n\n  return (\n    <>\n      <ul className={css.items}>\n        {contactsList().map(contact => (\n          <OneContact key={contact.id} {...contact} />\n        ))}\n      </ul>\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__GKAq6\",\"input\":\"Filter_input__1Oxp3\"};","import React from 'react';\nimport { getStatusFilter } from 'redux/filter/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/FilterSlice';\nimport { nanoid } from 'nanoid';\nimport css from './Filter.module.css';\n\nexport default function Filter() {\n\tconst filter = useSelector(getStatusFilter);\n  const nameFilterId = nanoid();\n  const dispatch = useDispatch();\n\n  const changeFilter = e => {\n    const event = e.currentTarget.value;\n    dispatch(setFilter(event));\n  };\n\n  return (\n    <>\n      <label className={css.label} htmlFor={nameFilterId}>\n        Find contacts by name\n      </label>\n      <input\n        className={css.input}\n        type=\"text\"\n        value={filter}\n        id={nameFilterId}\n        onChange={changeFilter}\n      />\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Contacts_title__LxdN4\",\"subtitle\":\"Contacts_subtitle__YZry6\"};","import { selectLoading } from 'redux/contacts/selectors';\nimport Form from 'components/ContactsComponents/Form';\nimport ContactList from 'components/ContactsComponents/ContactList';\nimport Filter from 'components/ContactsComponents/Filter';\nimport css from './Contacts.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useContacts } from 'hooks/useContacts';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function Contacts() {\n  const isLoading = useSelector(selectLoading);\n  const { contacts } = useContacts();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <section>\n      <h1 className={css.title}>Your phonebook</h1>\n      <Form />\n      <h2 className={css.subtitle}>Contacts</h2>\n      {contacts.length > 0 ? (\n        <>\n          {isLoading && <p>Loading...</p>}\n          <Filter />\n          <ContactList />\n        </>\n      ) : (\n        <p className={css.text}>You have no contacts</p>\n      )}\n    </section>\n  );\n}\n"],"names":["Button","children","className","css","selectLoading","state","contacts","loading","selectAllContacts","items","useContacts","isLoading","useSelector","Form","useState","name","setName","number","setNumber","dispatch","useDispatch","nameInputId","nanoid","numberInputId","handleInputChange","event","target","value","reset","onSubmit","preventDefault","map","contact","some","contactName","toLowerCase","toast","newContact","addContact","htmlFor","type","onChange","id","pattern","title","required","disabled","OneContact","onClick","contactId","deleteContact","getStatusFilter","filter","ContactList","normalizedFilter","includes","contactsList","Filter","nameFilterId","e","currentTarget","setFilter","Contacts","useEffect","fetchContacts","length"],"sourceRoot":""}