{"version":3,"file":"static/js/618.d9b5e652.chunk.js","mappings":"0LACA,MAAsB,0BAAtB,EAA0D,8BAA1D,EAAgG,4BAAhG,EAAoI,4BAApI,EAAwK,4BAAxK,EAAgN,gCAAhN,EAAuP,2BAAvP,EAA2R,6B,6ECQ5Q,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACZC,GAAiBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC7BC,GAAWC,EAAAA,EAAAA,MAEVC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAmBxB,OACE,gBAAKG,UAAWC,EAAhB,UACE,kBAAMD,UAAWC,EAAaC,SAnBb,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfjB,GACEkB,EAAAA,EAAAA,IAAS,CACPC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,MAAON,EAAKI,SAASE,MAAMD,MAC3BE,SAAUP,EAAKI,SAASG,SAASF,SAInCnB,IACJc,EAAKQ,QACLnB,EAAS,YAAa,CAAEoB,SAAS,IAEhC,EAIyDC,aAAa,MAAnE,WACE,eAAIf,UAAWC,EAAf,2BACA,kBAAOD,UAAWC,EAAWe,QAASpB,EAAtC,uBAGA,kBACEI,UAAWC,EACXgB,KAAK,OACLT,KAAK,OACLU,GAAItB,EACJuB,UAAQ,KAGV,kBAAOnB,UAAWC,EAAWe,QAASlB,EAAtC,oBAGA,kBACEE,UAAWC,EACXgB,KAAK,QACLT,KAAK,QACLU,GAAIpB,EACJsB,QAAQ,2EACRD,UAAQ,KAGV,kBAAOnB,UAAWC,EAAWe,QAASjB,EAAtC,uBAGA,kBACEC,UAAWC,EACXgB,KAAK,WACLT,KAAK,WACLU,GAAInB,EACJoB,UAAQ,KAEV,iBAAKnB,UAAWC,EAAhB,WACE,SAAC,KAAD,CAAMD,UAAWC,EAAUoB,GAAG,IAA9B,UACE,SAACC,EAAA,EAAD,CAAQL,KAAK,SAAb,wBAEF,mBAAQjB,UAAWC,EAAYgB,KAAK,SAApC,6BAKT,CC/Ec,SAASM,IACvB,OACC,+BACC,SAACnC,EAAD,KAGF,C,wDCPM,IAkBIS,EAAS,eAAC2B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACV,EAAIW,GAWvD,OAREX,IAFFW,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"box\":\"RegisterForm_box__vIBc8\",\"formBox\":\"RegisterForm_formBox__7MPjY\",\"title\":\"RegisterForm_title__EvDyW\",\"label\":\"RegisterForm_label__4pTXF\",\"input\":\"RegisterForm_input__FsgBz\",\"buttonBox\":\"RegisterForm_buttonBox__6AVwU\",\"link\":\"RegisterForm_link__xu2eW\",\"button\":\"RegisterForm_button__B3hFq\"};","import css from './RegisterForm.module.css';\nimport Button from 'components/CommonComponents/Button';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Link } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport {selectIsLoggedIn} from 'redux/auth/selectors';\n\nexport default function RegisterForm() {\n  const dispatch = useDispatch();\n\tconst isLoginSuccess = useSelector(selectIsLoggedIn);\n\tconst navigate = useNavigate();\n\n  const nameInputId = nanoid();\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n\n\t if (isLoginSuccess) {\n\t\tform.reset();\n\t\tnavigate(\"/contacts\", { replace: true });\n\t }\n  };\n\n  return (\n    <div className={css.box}>\n      <form className={css.formBox} onSubmit={handleSubmit} autoComplete=\"off\">\n        <h2 className={css.title}>Registration</h2>\n        <label className={css.label} htmlFor={nameInputId}>\n          Username\n        </label>\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          id={nameInputId}\n          required\n        />\n\n        <label className={css.label} htmlFor={emailInputId}>\n          Email\n        </label>\n        <input\n          className={css.input}\n          type=\"email\"\n          name=\"email\"\n          id={emailInputId}\n          pattern=\"^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$\"\n          required\n        />\n\n        <label className={css.label} htmlFor={passwordInputId}>\n          Password\n        </label>\n        <input\n          className={css.input}\n          type=\"password\"\n          name=\"password\"\n          id={passwordInputId}\n          required\n        />\n        <div className={css.buttonBox}>\n          <Link className={css.link} to=\"/\">\n            <Button type=\"button\">Go Back</Button>\n          </Link>\n          <button className={css.button} type=\"submit\">Register</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n","import RegisterForm from 'components/RegisterForm'\n\nexport default function Register() {\n\treturn (\n\t\t<>\n\t\t\t<RegisterForm/>\n\t\t</>\n\t)\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["RegisterForm","dispatch","useDispatch","isLoginSuccess","useSelector","selectIsLoggedIn","navigate","useNavigate","nameInputId","nanoid","emailInputId","passwordInputId","className","css","onSubmit","e","preventDefault","form","currentTarget","register","name","elements","value","email","password","reset","replace","autoComplete","htmlFor","type","id","required","pattern","to","Button","Register","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}